{"version":3,"sources":["src/modifiers.js","src/Sentence.js","src/check.js","src/scripts.js"],"names":["condition","word","modify","class","text","substr","Word","raw","url","hasUrl","match","withSpaces","replace","trim","slide","modifiers","modifier","Sentence","sentence","slides","split","map","parse","relScrollLerp","oldCharging","oldScroll","colors","bg","r","g","b","fg","check","config","elems","currentSlideIndex","updateDom","oldRelScrollLerp","relScroll","window","scrollY","length","threshold","lerp","el","style","transform","innerHeight","charging","document","querySelector","width","lerpColor","body","backgroundColor","color","requestAnimationFrame","slideIndex","elem","a","createElement","setAttribute","textContent","append","className","val1","val2","t","color1","color2","height"],"mappings":";;;AAAe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACb,CAEEA,UAAW,SAAAC,GAAQA,MAAY,MAAZA,EAAK,IACxBC,OAAQ,SAAAD,GAAS,MAAA,CAAEE,MAAO,OAAQC,KAAMH,EAAKI,OAAO,MAEtD,CAEEL,UAAW,SAAAC,GAAQA,MAAY,MAAZA,EAAK,IACxBC,OAAQ,SAAAD,GAAS,MAAA,CAAEE,MAAO,UAAWC,KAAMH,EAAKI,OAAO,MAEzD,CAEEL,UAAW,SAAAC,GAAQA,MAAY,MAAZA,EAAK,IACxBC,OAAQ,SAAAD,GAAS,MAAA,CAAEE,MAAO,QAASC,KAAMH,EAAKI,OAAO,MAEvD,CAEEL,UAAW,SAAAC,GAAQA,MAAY,MAAZA,EAAK,IACxBC,OAAQ,SAAAD,GAAS,MAAA,CAAEE,MAAO,OAAQC,KAAMH,EAAKI,OAAO,MAEtD,CAEEL,UAAW,SAAAC,GAAQA,MAAY,MAAZA,EAAK,IACxBC,OAAQ,SAAAD,GAAS,MAAA,CAAEE,MAAO,GAAIC,KAAMH,EAAKI,OAAO,MAElD,CAEEL,UAAW,SAAAC,GAAQ,OAAA,GACnBC,OAAQ,SAAAD,GAAS,MAAA,CAAEE,MAAO,GAAIC,KAAMH,MA7BzB,QAAA,QAAA;;ACsCZ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtCH,IAAA,EAAA,EAAA,QAAA,gBAsCG,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EApCGK,IAAAA,EAoCH,WAnCYC,SAAAA,EAAAA,GAAK,EAAA,KAAA,GAAOA,KAAAA,IAAMA,EAmC9B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAjCQ,MAAA,WACHA,IACAC,EADAD,EAAM,KAAKA,IAITE,EAAS,KAAKF,IAAIG,MAAM,iBAC1BD,IACFD,EAAMC,EAAO,GACbF,EAAME,EAAO,IAGTE,IAAAA,EAAaJ,EAAIK,QAAQ,KAAM,KAAKC,OAEtCC,EAAQ,GAbL,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAccC,IAAAA,IAAW,EAAXA,EAAAA,EAArB,QAAgC,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAvBC,IAAAA,EAAuB,EAAA,MAC1BA,GAAAA,EAAShB,UAAUW,GAAa,CAClCG,EAAQE,EAASd,OAAOS,GACxB,QAjBG,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAsBAG,OADHL,IAAQK,EAAMN,IAAMA,GACjBM,MAWR,EAAA,GAPkBG,EAOlB,WANYC,SAAAA,EAAAA,GAAU,EAAA,KAAA,GAAOA,KAAAA,SAAWA,EAMxC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAJQ,MAAA,WAGAC,OAFO,KAAKD,SAASE,MAAM,KAAKC,IAAI,SAAApB,GAAQ,OAAA,IAAIK,EAAKL,KACvCoB,IAAI,SAAApB,GAAQA,OAAAA,EAAKqB,cAEvC,EAAA,GAAA,QAAA,QAAA;;AC+BF,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EArED,IAAIC,EAAgB,EAChBC,EAAc,EACdC,EAAY,EAEVC,EAAS,CACbC,GAAI,CAAC,CAACC,EAAG,GAAIC,EAAG,EAAGC,EAAG,KAAM,CAACF,EAAG,IAAKC,EAAG,EAAGC,EAAG,KAC9CC,GAAI,CAAC,CAACH,EAAG,IAAKC,EAAG,IAAKC,EAAG,KAAM,CAACF,EAAG,IAAKC,EAAG,IAAKC,EAAG,KAGtC,SAASE,EAAMC,EAAQC,EAAOC,GAC3CC,EAAUD,EAAmBD,EAAOD,GAE9BI,IAAAA,EAAmBd,EACnBe,EAAYC,OAAOC,SAAWN,EAAMO,OAASR,EAAOS,WAC1DnB,EAAgBoB,EAAKN,EAAyC,IAAtBF,GAA2BA,IAAsBD,EAAMO,OAAO,EAAK,GAAKH,EAAW,IAE3HL,EAAOW,GAAGC,MAAMC,UAA8BvB,kBAAAA,OAAAA,GAAiBA,EAAgB,IAAOgB,OAAOQ,YAAc,GAA3G,UAEMC,IAAAA,EAAWL,EAAKnB,EAAac,EAAW,IAC9CW,SAASC,cAAc,aAAaL,MAAMM,MAAWH,GAAAA,OAAW,IAAXA,EAArD,MACAxB,EAAcwB,EAERrB,IAAAA,EAAKyB,EAAU1B,EAAOC,GAAG,GAAID,EAAOC,GAAG,GAAIqB,GAC3CjB,EAAKqB,EAAU1B,EAAOK,GAAG,GAAIL,EAAOK,GAAG,GAAIiB,GAEjDC,SAASI,KAAKR,MAAMS,gBAAyB3B,OAAAA,OAAAA,EAAGC,EAAMD,MAAAA,OAAAA,EAAGE,EAAMF,MAAAA,OAAAA,EAAGG,EAAlE,KACAmB,SAASC,cAAc,aAAaL,MAAMS,gBAAyBvB,OAAAA,OAAAA,EAAGH,EAAMG,MAAAA,OAAAA,EAAGF,EAAME,MAAAA,OAAAA,EAAGD,EAAxF,KACAG,EAAOW,GAAGC,MAAMU,MAAexB,OAAAA,OAAAA,EAAGH,EAAMG,MAAAA,OAAAA,EAAGF,EAAME,MAAAA,OAAAA,EAAGD,EAApD,KAEIS,OAAOC,SAAWL,EAAoB,GAAKF,EAAOS,UAEpDN,IADAD,EAC6BD,EAAOD,GAC3BM,OAAOC,QAAUL,EAAoBF,EAAOS,WAErDN,IADAD,EAC6BD,EAAOD,GAEtCM,OAAOiB,sBAAsB,WAAMxB,OAAAA,EAAMC,EAAQC,EAAOC,KAG1D,SAASC,EAAWqB,EAAYvB,EAAOD,GACjCR,GAAAA,IAAcc,OAAOC,QAAS,CAC1BkB,IAAAA,EAAOxB,EAAMuB,GACf,IAACC,EAAM,OACPA,GAAAA,EAAKlD,IAAK,CACNmD,IAAAA,EAAIV,SAASW,cAAc,KACjCD,EAAEE,aAAa,OAAQH,EAAKlD,KAC5BmD,EAAEE,aAAa,SAAU,UACzBF,EAAEG,YAAcJ,EAAKtD,KACrB6B,EAAOW,GAAGkB,YAAc,GACxB7B,EAAOW,GAAGmB,OAAOJ,QAEjB1B,EAAOW,GAAGkB,YAAcJ,EAAKtD,KAE3BsD,EAAKvD,MAAO8B,EAAOW,GAAGoB,UAAYN,EAAKvD,MACtC8B,EAAOW,GAAGoB,UAAY,GAE7BvC,EAAYc,OAAOC,QAGrB,SAASG,EAAKsB,EAAMC,EAAMC,GACjBF,OAAAA,GAASC,EAAOD,GAAQE,EAGjC,SAASf,EAAUgB,EAAQC,EAAQF,GAC7BZ,IAAAA,EAAQ,GAILA,OAHPA,EAAM3B,EAAIe,EAAKyB,EAAOxC,EAAGyC,EAAOzC,EAAGuC,GACnCZ,EAAM1B,EAAIc,EAAKyB,EAAOvC,EAAGwC,EAAOxC,EAAGsC,GACnCZ,EAAMzB,EAAIa,EAAKyB,EAAOtC,EAAGuC,EAAOvC,EAAGqC,GAC5BZ;;ACpDT,aAhBA,QAAA,gBACA,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,eAcA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAZA,IAAMtB,EAAS,CACbS,UAAW,IACXE,GAAIK,SAASC,cAAc,WAGvBhC,EAAW,IAAID,EAAJ,QAAa,8WACxBiB,EAAQhB,EAASI,QAEvB2B,SAASI,KAAKR,MAAMyB,OAAYpC,GAAAA,OAAAA,EAAMO,OAASR,EAAOS,UAAtD,MAEA,IAAIP,EAAoB,GAExB,EAAMF,EAAAA,SAAAA,EAAQC,EAAOC","file":"scripts.1dc5fb74.js","sourceRoot":"..","sourcesContent":["export default [\n  {\n    // Gros texte\n    condition: word => word[0] === '*',\n    modify: word => ({ class: 'hero', text: word.substr(1) })\n  },\n  {\n    // Gros texte en outline\n    condition: word => word[0] === '@',\n    modify: word => ({ class: 'outline', text: word.substr(1) })\n  },\n  {\n    // Petit texte\n    condition: word => word[0] === '-',\n    modify: word => ({ class: 'small', text: word.substr(1) })\n  },\n  {\n    // Texte barré\n    condition: word => word[0] === '~',\n    modify: word => ({ class: 'nope', text: word.substr(1) })\n  },\n  {\n    // Pour faire des slides vides ou échapper un des caractères précédents\n    condition: word => word[0] === '.',\n    modify: word => ({ class: '', text: word.substr(1) })\n  },\n  {\n    // Par défaut\n    condition: word => true,\n    modify: word => ({ class: '', text: word })\n  },\n]\n","import modifiers from './modifiers'\n\nclass Word {\n  constructor (raw) { this.raw = raw }\n\n  parse () {\n    let raw = this.raw\n    let url\n    \n    // check if has url\n    const hasUrl = this.raw.match(/\\((.*)\\)(.+)/i)\n    if (hasUrl) {\n      url = hasUrl[1]\n      raw = hasUrl[2]\n    }\n    \n    const withSpaces = raw.replace(/_/g, ' ').trim()\n    \n    let slide = { }\n    for (let modifier of modifiers) {\n      if (modifier.condition(withSpaces)) {\n        slide = modifier.modify(withSpaces) // apply a class\n        break\n      }\n    }\n    \n    if (hasUrl) slide.url = url\n    return slide\n  }\n}\n\nexport default class Sentence {\n  constructor (sentence) { this.sentence = sentence }\n\n  parse () {\n    const words = this.sentence.split(' ').map(word => new Word(word)) // sépare les mots\n    const slides = words.map(word => word.parse())\n    return slides\n  }\n}","let relScrollLerp = 0\nlet oldCharging = 0\nlet oldScroll = 0\n\nconst colors = {\n  bg: [{r: 60, g: 0, b: 200}, {r: 200, g: 0, b: 60}],\n  fg: [{r: 255, g: 100, b: 160}, {r: 255, g: 260, b: 0}]\n}\n\nexport default function check(config, elems, currentSlideIndex) {\n  updateDom(currentSlideIndex, elems, config)\n\n  const oldRelScrollLerp = relScrollLerp\n  const relScroll = window.scrollY / (elems.length * config.threshold)\n  relScrollLerp = lerp(oldRelScrollLerp, (currentSlideIndex === 0 || currentSlideIndex === elems.length-1) ? .5 : relScroll, .1)\n\n  config.el.style.transform = `translate3d(0, ${relScrollLerp - (relScrollLerp - 0.5) * window.innerHeight * 0.7}px, 0)`\n  \n  const charging = lerp(oldCharging, relScroll, .1)\n  document.querySelector('#charging').style.width = `${charging * 100}vw`\n  oldCharging = charging\n\n  const bg = lerpColor(colors.bg[0], colors.bg[1], charging)\n  const fg = lerpColor(colors.fg[0], colors.fg[1], charging)\n\n  document.body.style.backgroundColor = `rgb(${bg.r}, ${bg.g}, ${bg.b})`\n  document.querySelector('#charging').style.backgroundColor = `rgb(${fg.r}, ${fg.g}, ${fg.b})`\n  config.el.style.color = `rgb(${fg.r}, ${fg.g}, ${fg.b})`\n\n  if (window.scrollY > (currentSlideIndex + 1) * config.threshold) {\n    currentSlideIndex ++\n    updateDom(currentSlideIndex, elems, config)\n  } else if (window.scrollY < currentSlideIndex * config.threshold) {\n    currentSlideIndex --\n    updateDom(currentSlideIndex, elems, config)\n  }\n  window.requestAnimationFrame(() => check(config, elems, currentSlideIndex))\n}\n\nfunction updateDom (slideIndex, elems, config) {\n  if (oldScroll !== window.scrollY) {\n    const elem = elems[slideIndex]\n    if (!elem) return\n    if (elem.url) {\n      const a = document.createElement('a')\n      a.setAttribute('href', elem.url)\n      a.setAttribute('target', '_blank')\n      a.textContent = elem.text\n      config.el.textContent = ''\n      config.el.append(a)\n    } else {\n      config.el.textContent = elem.text\n    }\n    if (elem.class) config.el.className = elem.class\n    else config.el.className = ''\n  }\n  oldScroll = window.scrollY\n}\n\nfunction lerp(val1, val2, t) {\n  return val1 + ((val2 - val1) * t)\n}\n\nfunction lerpColor(color1, color2, t) {\n  let color = {}\n  color.r = lerp(color1.r, color2.r, t)\n  color.g = lerp(color1.g, color2.g, t)\n  color.b = lerp(color1.b, color2.b, t)\n  return color\n}","import './style.scss'\nimport Sentence from './Sentence'\nimport check from './check.js'\n\nconst config = {\n  threshold: 400,\n  el: document.querySelector('#slide')\n}\n\nconst sentence = new Sentence('-Scroll_now *Malo *Widerspach is a young @creative @developer from Lyon, France, currently having fun (https://achos.xxx)@at_achos! in_Barcelona. .:) You can check out his design work on (https://behance.net/mowh)Behance, and discover his past and current dev projects on (https://github.com/m0wh)GitHub. .... Feel free to *(https://twitter.com/mowhtr)say_hello.')\nconst elems = sentence.parse()\n\ndocument.body.style.height = `${elems.length * config.threshold}px`\n\nlet currentSlideIndex = 0\n\ncheck(config, elems, currentSlideIndex)"]}